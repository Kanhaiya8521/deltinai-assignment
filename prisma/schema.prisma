generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @unique @default(uuid())
  first_name            String?
  last_name             String?
  username              String?    @unique
  phone                 String?   @unique
  email                 String   @unique
  password              String
  status                Boolean   @default(false)
  avatar                String?
  main_balance          Float     @default(0)
  referral_code         String?   @unique
  referred_by           String?
  is_deleted            Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relationships
  studentProfile        Student?
}

model UserLoginSession {
  id            String   @id @unique @default(uuid())
  login_session String
  ip_address    String   @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RefreshToken {
  id          String  @id @unique @default(uuid())
  token       String  @unique
  blacklisted Boolean @default(false)
}

model Student {
  id             String     @id @default(uuid())
  userId         String     @unique
  dateOfBirth    DateTime?
  contactInfo    String?
  address        String?
  
  // Relationships
  user           User       @relation(fields: [userId], references: [id])
  qualifications Qualification[]
  applications   Application[]

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Qualification {
  id              String    @id @default(uuid())
  studentId       String
  level           String    // (12th, Bachelor's, Master's, etc.)
  institutionName String
  graduationYear  Int
  marks          Float?
  
  student        Student   @relation(fields: [studentId], references: [id])

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Course {
  id             String   @id @default(uuid())
  name           String
  duration       String
  tuitionFees    Float
  overview       String?
  
  eligibility    Eligibility[]
  applications   Application[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Eligibility {
  id         String  @id @default(uuid())
  courseId   String
  testType   String // e.g., IELTS, GMAT, SAT
  minScore   Float

  course     Course  @relation(fields: [courseId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Application {
  id          String   @id @default(uuid())
  studentId   String
  courseId    String
  status      ApplicationStatus @default(PENDING) 
  appliedAt   DateTime  @default(now())

  student     Student  @relation(fields: [studentId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
